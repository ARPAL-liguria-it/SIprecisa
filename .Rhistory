reference_confint <- c(refvalue,
refvalue - refuncertainty,
refvalue + refuncertainty)
mean_confint <- lm(datanoutlier[[response]] ~ 1) |> confint()
measurement_confint <- c(mean(datanoutlier[[response]], na.rm = TRUE),
mean_confint[1],
mean_confint[2])
myconfint <- data.frame(label = c("misure", "riferimento"),
meanval = c(measurement_confint[1], reference_confint[1]),
lwrval = c(measurement_confint[2], reference_confint[2]),
uprval = c(measurement_confint[3], reference_confint[3])
)
myboxplot <- ggplot2::ggplot() +
ggplot2::geom_boxplot(data = datanoutlier,
ggplot2::aes(x = "misure",
y = !!quo_response),
fill = "white",
col = "black",
outlier.shape = NA) +
ggplot2::geom_jitter(data = data,
ggplot2::aes(x = "misure",
y = !!quo_response,
col = rimosso),
width = 0.2) +
ggplot2::labs(x = "misure",
y = ylabtitle,
title = "Boxplot delle misure") +
ggplot2::scale_color_manual(values = cols,
breaks = c("s\u00EC", "no"),
labels = c("rimosso", "non rimosso"),
name = ggplot2::element_blank(),
drop = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "top")
mycomparison <- ggplot2::ggplot(
data = myconfint,
ggplot2::aes(x = label,
y = meanval)
) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(
ggplot2::aes(ymin = lwrval,
ymax = uprval)
) +
ggplot2::labs(y = ylabtitle,
x = ggplot2::element_blank(),
title = "Intervalli di confidenza delle medie") +
ggplot2::theme_bw()
p1 + p2 + patchwork::plot_layout(widths = c(1, 3),
nrow = 1)
}
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 2, udm = "ng/ml")
ggboxplot_riprec <- function(data,
response,
refvalue,
refuncertainty,
udm) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
is.numeric(refuncertainty),
is.character(udm)
)
rimosso <- NULL
cols <- c("s\u00EC" = "#999999", "no" = "black")
data$rimosso <- factor(data$rimosso, levels = c("s\u00EC", "no"))
ylabtitle <- paste0(response, ifelse(udm != "", paste0(" (", udm, ")"), ""))
quo_response <- ggplot2::ensym(response)
datanoutlier <- data[which(data$rimosso == "no"),]
# 95% confidence interval for measurement values and the reference value
reference_confint <- c(refvalue,
refvalue - refuncertainty,
refvalue + refuncertainty)
mean_confint <- lm(datanoutlier[[response]] ~ 1) |> confint()
measurement_confint <- c(mean(datanoutlier[[response]], na.rm = TRUE),
mean_confint[1],
mean_confint[2])
myconfint <- data.frame(label = c("misure", "riferimento"),
meanval = c(measurement_confint[1], reference_confint[1]),
lwrval = c(measurement_confint[2], reference_confint[2]),
uprval = c(measurement_confint[3], reference_confint[3])
)
myboxplot <- ggplot2::ggplot() +
ggplot2::geom_boxplot(data = datanoutlier,
ggplot2::aes(x = "misure",
y = !!quo_response),
fill = "white",
col = "black",
outlier.shape = NA) +
ggplot2::geom_jitter(data = data,
ggplot2::aes(x = "misure",
y = !!quo_response,
col = rimosso),
width = 0.2) +
ggplot2::labs(x = "misure",
y = ylabtitle,
title = "Boxplot delle misure") +
ggplot2::scale_color_manual(values = cols,
breaks = c("s\u00EC", "no"),
labels = c("rimosso", "non rimosso"),
name = ggplot2::element_blank(),
drop = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "top")
mycomparison <- ggplot2::ggplot(
data = myconfint,
ggplot2::aes(x = label,
y = meanval)
) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(
ggplot2::aes(ymin = lwrval,
ymax = uprval)
) +
ggplot2::labs(y = ylabtitle,
x = ggplot2::element_blank(),
title = "Intervalli di confidenza delle medie") +
ggplot2::theme_bw()
myboxplot + mycomparison +
patchwork::plot_layout(widths = c(1, 3), nrow = 1)
}
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 2, udm = "ng/ml")
?ggplot2::labs
?scale_y_continuous
ggboxplot_riprec <- function(data,
response,
refvalue,
refuncertainty,
udm) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
is.numeric(refuncertainty),
is.character(udm)
)
rimosso <- NULL
cols <- c("s\u00EC" = "#999999", "no" = "black")
data$rimosso <- factor(data$rimosso, levels = c("s\u00EC", "no"))
ylabtitle <- paste0(response, ifelse(udm != "", paste0(" (", udm, ")"), ""))
quo_response <- ggplot2::ensym(response)
# scale for the y axis
enlarge <- 0.05 # proportion of increased axis lenght
minvalue <- min(data[[response]], na.rm = TRUE)
maxvalue <- max(data[[response]], na.rm = TRUE)
yrange <- maxvalue - minvalue
ymax <- maxvalue + enlarge * yrange
ymin <- minvalue - enlarge * yrange
datanoutlier <- data[which(data$rimosso == "no"),]
# 95% confidence interval for measurement values and the reference value
reference_confint <- c(refvalue,
refvalue - refuncertainty,
refvalue + refuncertainty)
mean_confint <- lm(datanoutlier[[response]] ~ 1) |> confint()
measurement_confint <- c(mean(datanoutlier[[response]], na.rm = TRUE),
mean_confint[1],
mean_confint[2])
myconfint <- data.frame(label = c("misure", "riferimento"),
meanval = c(measurement_confint[1], reference_confint[1]),
lwrval = c(measurement_confint[2], reference_confint[2]),
uprval = c(measurement_confint[3], reference_confint[3])
)
myboxplot <- ggplot2::ggplot() +
ggplot2::geom_boxplot(data = datanoutlier,
ggplot2::aes(x = "misure",
y = !!quo_response),
fill = "white",
col = "black",
outlier.shape = NA) +
ggplot2::geom_jitter(data = data,
ggplot2::aes(x = "misure",
y = !!quo_response,
col = rimosso),
width = 0.2) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(x = "misure",
y = ylabtitle,
title = "Boxplot delle misure") +
ggplot2::scale_color_manual(values = cols,
breaks = c("s\u00EC", "no"),
labels = c("rimosso", "non rimosso"),
name = ggplot2::element_blank(),
drop = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "top")
mycomparison <- ggplot2::ggplot(
data = myconfint,
ggplot2::aes(x = label,
y = meanval)
) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(
ggplot2::aes(ymin = lwrval,
ymax = uprval)
) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(y = ylabtitle,
x = ggplot2::element_blank(),
title = "Intervalli di confidenza delle medie") +
ggplot2::theme_bw()
myboxplot + mycomparison +
patchwork::plot_layout(widths = c(1, 3), nrow = 1)
}
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 2, udm = "ng/ml")
ggboxplot_riprec <- function(data,
response,
refvalue,
refuncertainty,
udm) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
is.numeric(refuncertainty),
is.character(udm)
)
rimosso <- NULL
cols <- c("s\u00EC" = "#999999", "no" = "black")
data$rimosso <- factor(data$rimosso, levels = c("s\u00EC", "no"))
ylabtitle <- paste0(response, ifelse(udm != "", paste0(" (", udm, ")"), ""))
quo_response <- ggplot2::ensym(response)
# scale for the y axis
enlarge <- 0.05 # proportion of increased axis lenght
minvalue <- min(data[[response]], na.rm = TRUE)
maxvalue <- max(data[[response]], na.rm = TRUE)
yrange <- maxvalue - minvalue
ymax <- maxvalue + enlarge * yrange
ymin <- minvalue - enlarge * yrange
datanoutlier <- data[which(data$rimosso == "no"),]
# 95% confidence interval for measurement values and the reference value
reference_confint <- c(refvalue,
refvalue - refuncertainty,
refvalue + refuncertainty)
mean_confint <- lm(datanoutlier[[response]] ~ 1) |> confint()
measurement_confint <- c(mean(datanoutlier[[response]], na.rm = TRUE),
mean_confint[1],
mean_confint[2])
myconfint <- data.frame(label = c("misure", "riferimento"),
meanval = c(measurement_confint[1], reference_confint[1]),
lwrval = c(measurement_confint[2], reference_confint[2]),
uprval = c(measurement_confint[3], reference_confint[3])
)
myboxplot <- ggplot2::ggplot() +
ggplot2::geom_boxplot(data = datanoutlier,
ggplot2::aes(x = "misure",
y = !!quo_response),
fill = "white",
col = "black",
outlier.shape = NA) +
ggplot2::geom_jitter(data = data,
ggplot2::aes(x = "misure",
y = !!quo_response,
col = rimosso),
width = 0.2) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(x = ggplot2::element_blank(),
y = ylabtitle,
title = "Boxplot delle misure") +
ggplot2::scale_color_manual(values = cols,
breaks = c("s\u00EC", "no"),
labels = c("rimosso", "non rimosso"),
name = ggplot2::element_blank(),
drop = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "top")
mycomparison <- ggplot2::ggplot(
data = myconfint,
ggplot2::aes(x = label,
y = meanval)
) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(
ggplot2::aes(ymin = lwrval,
ymax = uprval),
width = 0
) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(y = ggplot2::element_blank(),
x = ggplot2::element_blank(),
title = "Intervalli di confidenza delle medie") +
ggplot2::theme_bw()
myboxplot + mycomparison +
patchwork::plot_layout(widths = c(1, 3), nrow = 1)
}
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 2, udm = "ng/ml")
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
ggboxplot_riprec <- function(data,
response,
refvalue,
refuncertainty,
udm) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
is.numeric(refuncertainty),
is.character(udm)
)
rimosso <- NULL
cols <- c("s\u00EC" = "#999999", "no" = "black")
data$rimosso <- factor(data$rimosso, levels = c("s\u00EC", "no"))
ylabtitle <- paste0(response, ifelse(udm != "", paste0(" (", udm, ")"), ""))
quo_response <- ggplot2::ensym(response)
# scale for the y axis
enlarge <- 0.05 # proportion of increased axis lenght
minvalue <- min(data[[response]], na.rm = TRUE)
maxvalue <- max(data[[response]], na.rm = TRUE)
yrange <- maxvalue - minvalue
ymax <- maxvalue + enlarge * yrange
ymin <- minvalue - enlarge * yrange
datanoutlier <- data[which(data$rimosso == "no"),]
# 95% confidence interval for measurement values and the reference value
reference_confint <- c(refvalue,
refvalue - refuncertainty,
refvalue + refuncertainty)
mean_confint <- lm(datanoutlier[[response]] ~ 1) |> confint()
measurement_confint <- c(mean(datanoutlier[[response]], na.rm = TRUE),
mean_confint[1],
mean_confint[2])
myconfint <- data.frame(label = c("misure", "riferimento"),
meanval = c(measurement_confint[1], reference_confint[1]),
lwrval = c(measurement_confint[2], reference_confint[2]),
uprval = c(measurement_confint[3], reference_confint[3])
)
myboxplot <- ggplot2::ggplot() +
ggplot2::geom_boxplot(data = datanoutlier,
ggplot2::aes(x = "misure",
y = !!quo_response),
fill = "white",
col = "black",
outlier.shape = NA) +
ggplot2::geom_jitter(data = data,
ggplot2::aes(x = "misure",
y = !!quo_response,
col = rimosso),
width = 0.2) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(x = ggplot2::element_blank(),
y = ylabtitle,
title = "Boxplot delle misure") +
ggplot2::scale_color_manual(values = cols,
breaks = c("s\u00EC", "no"),
labels = c("rimosso", "non rimosso"),
name = ggplot2::element_blank(),
drop = FALSE) +
ggplot2::theme_bw() +
ggplot2::theme(legend.position = "bottom")
mycomparison <- ggplot2::ggplot(
data = myconfint,
ggplot2::aes(x = label,
y = meanval)
) +
ggplot2::geom_point() +
ggplot2::geom_errorbar(
ggplot2::aes(ymin = lwrval,
ymax = uprval),
width = 0
) +
ggplot2::scale_y_continuous(limits = c(ymin, ymax)) +
ggplot2::labs(y = ggplot2::element_blank(),
x = ggplot2::element_blank(),
title = "Intervalli di confidenza delle medie") +
ggplot2::theme_bw()
myboxplot + mycomparison +
patchwork::plot_layout(widths = c(1, 3), nrow = 1)
}
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
colnames(b)[1] <- "response"
ggboxplot_riprec(data = b, response = "pippo", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
b[2, 2]
b[2, 2] <- "sì"
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
b[2, 2] <- "no"
b[which.min(b$response), ]
b[which.min(b$response), 2]
b[which.min(b$response), 2] <- "sì"
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 0, udm = "ng/ml")
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 1, udm = "ng/ml")
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 0.2, udm = "ng/ml")
ggboxplot_riprec(data = b, response = "response", refvalue = 8, refuncertainty = 0.5, udm = "ng/ml")
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateSelectizeInput
shiny::runApp()
?updateSelectizeInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(data.table)
shiny::runApp()
shiny::runApp()
library(data.table)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(SIprecisa)
devtools::document()
devtools::document()
devtools::document()
devtools::load_all(".")
shiny::runApp()
usethis::use_package("DT")
usethis::use_package("data.table")
usethis::use_package("ggplot2")
usethis::use_package("markdown")
usethis::use_package("patchwork")
usethis::use_package("shiny")
usethis::use_package("bslib")
usethis::use_package("future")
usethis::use_package("golem")
usethis::use_package("plotly")
usethis::use_package("rmarkdown")
usethis::use_package("promises")
usethis::use_package("sessioninfo")
usethis::use_package("shinyjs")
usethis::use_package("stats")
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
library(SIprecisa)
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
0.35+0.65
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
devtools::load_all(".")
shiny::runApp()
library(SIprecisa)
shiny::runApp()
library(SIprecisa)
shiny::runApp()
shiny::runApp()
a
data.table(a = rnorm(20), b = rep("ciao", 20))
a <- data.table(a = rnorm(20), b = rep("ciao", 20))
a[, .N]
shiny::runApp()
shiny::runApp()
a
a$b[4] <- "bao"
a
a[b == "bao"]
a[b == "bao",]
a[b == "bao",] |> str()
a[a$b == "bao",] |> str()
a
a$a
a$b
a[a$b == "bao"] |> str()
a[a$b == "bao"]
a[a$b == "bao"]
d <-a
d[d$b == "bao"]
d[d$b == "bao"] |> str()
shiny::runApp()
shiny::runApp()
shiny::runApp()
