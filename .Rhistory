#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
?t
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
print(str(mysummary))
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
print(str(mysummary))
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
mysummary <- rbind(n_out, mysummary)[]
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
mysummary <- rbind(n_out, mysummary$V1)[]
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
mysummary[]
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .("n esclusi" = .N) ]
c(n_out, mysummary$V1)[]
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
statistica <- NULL
mydata <- data.table::data.table(data)
lvl <- levels("misure")
roworder <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
fm <- as.formula("statistica ~ .")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .N]
c(n_out, mysummary$V1)[]
# colnames(mysummary) <- c("statistica", "misure")
# adding unit of measurement
# mysummary[, "statistica" := lapply(statistica, (\(x) {
#   ifelse(x != {"n" || "n esclusi"} & udm != "", paste0(x, " (", udm, ")"), x)
#   }))]
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
rowsummary_riprec <- function(data,
response,
udm = "",
signif = 3L) {
stopifnot(
is.data.frame(data),
is.character(response),
is.character(udm),
all.equal(signif, as.integer(signif)),
response %in% colnames(data),
"outlier" %in% colnames(data)
)
mydata <- data.table::data.table(data)
myrows <- c("n esclusi", "n", "massimo", "media", "mediana", "minimo")
# calculate the summary
mysummary <- mydata[outlier == FALSE, .(
n = .N,
massimo = max(get(response), na.rm = TRUE) |> format_sigfig(signif),
media = mean(get(response), na.rm = TRUE) |> format_sigfig(signif),
mediana = stats::median(get(response), na.rm = TRUE) |> format_sigfig(signif),
minimo = min(get(response), na.rm = TRUE) |> format_sigfig(signif)
)] |> data.table::transpose()
n_out <- mydata[outlier == TRUE, .N]
thesummary <- data.table::data.table(statistica = myrows,
misure = c(n_out, mysummary$V1))
}
rowsummary_riprec(data = a, response = "pippo", udm = "ng/ml")[]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?lm
?confint
shiny::runApp()
shiny::runApp()
a
lm(a ~ 1)
lm(a$pippo ~ 1)
lm(a$pippo ~ 1) |> confint()
lm(a$pippo ~ 1) |> confint(level = 0.95)
lm(a$pippo ~ 1) |> confint(level = 0.99)
lm(a$pippo ~ 1) |> confint(level = NULL)
lm(a$pippo ~ 1) |> confint(level = "a")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fct_ttest_riprec <- function(data,
response,
refvalue,
significance = 0.95) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
response %in% colnames(data)
)
# recoding the significance level
alpha <- significance + (1 - significance)/2
data_mean <- mean(data[[response]], na.rm = TRUE)
max_mean <- ifelse(data_mean > refvalue,
"media delle misure",
"valore di riferimento")
min_mean <- ifelse(data_mean <= refvalue,
"media delle misure",
"valore di riferimento")
# # t-test results
ttest <- stats::t.test(x = data[[response]], mu = refvalue,
alternative = "two.sided",
conf.level = significance)
mymean <- data_mean |> format_sigfig()
mymeanconfint <- c(NA, NA)
mymeanconfint[1] <- ttest$conf.int[1] |> format_sigfig()
mymeanconfint[2] <- ttest$conf.int[2] |> format_sigfig()
tvalue <- ttest$statistic |> abs() |> (\(x) sprintf("%.4f", x))()
dof <- ttest$parameter
tcritical <- stats::qt(alpha, dof) |> (\(x) sprintf("%.4f", x))()
pvalue <- ttest$p.value |> (\(x) sprintf("%.4f", x))()
# Being clear with some text
h0_text <- sprintf("%s = %s", max_mean, min_mean)
h1_text <- sprintf("%s \u2260 %s", max_mean, min_mean)
positive <- "Il bias delle misure rispetto al valore di riferimento è statisticamente significativo"
negative <- "Il bias delle misure rispetto al valore di riferimento non è statisticamente significativo"
result <- ifelse(tvalue < tcritical, negative, positive)
list(hypotheses = c("h0" = h0_text,
"h1" = h1_text),
mean = c("mean" = mymean,
"lwrci" = mymeanconfint[1],
"uprci" = mymeanconfint[2]),
test = c("dof" = dof |> as.character(),
"alpha" = alpha |> (\(x) sprintf("%.3f", x))(),
"tsper" = unname(tvalue),
"ttheo" = tcritical,
"pvalue" = pvalue),
result = unname(result))
}
a
fct_ttest_riprec(a, "pippo", 10)
fct_ttest_riprec(a, "pippo", 12.5)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
devtools::load_all(".")
devtools::load_all(".")
shiny::runApp()
shiny::runApp()
dim(a)
data.frame(a = rnorm(20), b = rnorm(20)) |> dim()
data.frame(a = rnorm(20), b = rnorm(20)) |> dim()[1]
data.frame(a = rnorm(20), b = rnorm(20)) |> dim() |> (\(x) x[1])()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
qt(0.95, 100)
qt(0.05, 100)
?qt(0.95, 100)
qt(0.975, 100)
qt(0.975, 10)
qt(0.975, 100000)
qt(0.975, 10000000000000000)
which.max(5, 6)
which.max(c(5, 6))
c(5,6)[which.max(c(5, 6))]
NULL != 0
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
fct_entest_riprec <- function(data,
response,
refvalue,
refuncertainty) {
stopifnot(
is.data.frame(data),
is.character(response),
is.numeric(refvalue),
is.numeric(refuncertainty),
response %in% colnames(data)
)
data_mean <- mean(data[[response]])
data_sd <- sd(data[[response]])
data_n <- length(data[[response]])
data_se <- data_sd / sqrt(data_n)
data_ci <- qt(0.975, data_n - 1) * data_se
means <- c(data_mean, refvalue)
mean_max <- means[which.max(means)]
mean_min <- means[which.min(means)]
max_val_lbl <- ifelse(data_mean > refvalue, "misure", "riferimento")
min_val_lbl <- ifelse(data_mean < refvalue, "misure", "riferimento")
max_val_unc <- ifelse(data_mean > refvalue, data_ci, refuncertainty)
min_val_unc <- ifelse(data_mean < refvalue, data_ci, refuncertainty)
# en-test results
diff_val <- (mean_max - mean_min)
diff_unc <- sqrt(max_val_unc^2 + min_val_unc^2)
diff_confint <- diff_val + c(-1, +1) * diff_unc
entest <- diff_val / diff_unc
ecritical <- 1
# Being clear with some text
h0_text <- sprintf("%s = %s", max_val_lbl, min_val_lbl)
h1_text <- sprintf("%s \u2260 %s", max_val_lbl, min_val_lbl)
positive <- "Il bias delle misure rispetto al valore di riferimento è statisticamente significativo"
negative <- "Il bias delle misure rispetto al valore di riferimento non è statisticamente significativo"
result <- ifelse(entest < ecritical, negative, positive)
list(hypotheses = c("h0" = h0_text,
"h1" = h1_text),
difference = c("mean" = diff_val |> format_sigfig(),
"lwrci" = diff_confint[1] |> format_sigfig(),
"uprci" = diff_confint[2] |> format_sigfig()),
test = c("entest" = entest |> format_sigfig(),
"ecritical" = ecritical |> format_sigfig()),
result = result)
}
signiftodigits <- function(value,
signif = 4L) {
stopifnot(is.numeric(value),
all.equal(signif, as.integer(signif)))
if (is.infinite(value)){
0
} else {
# the number is converted to text with the desired significant figures
sprintf_txt <- paste0("%#.", signif, "g")
value_text <- sprintf(sprintf_txt, value)
# splitting integers from decimals
value_digits <- strsplit(value_text, "\\.")
value_digits[[1]][[1]] <- gsub("-", "" , value_digits[[1]][[1]])
# counting the integers
integers <- value_digits[[1]][[1]]
value_integers <- nchar(integers)
# if the integers are not enough for the requested significant figures,
# or the data has been expressed in scientific notation, the number of decimals
# is 0, otherwise, the decimals are counted.
if(value_integers < signif) {
# counting the decimals
decimals <- ifelse(length(value_digits[[1]]) == 1,
paste0(rep("0", signif - value_integers), collapse = ""),
value_digits[[1]][[2]])
value_decimals <- nchar(decimals)
# checking if the number is scientific notation
is_scientific <- "e" %in% strsplit(decimals, "")[[1]]
ndigits <- ifelse(is_scientific, 0, value_decimals)
ndigits
} else {
ndigits <- 0
ndigits
}
}
}
#' Formatting a number with a given number of significant figures
#'
#' @description The function returns a character values with a number formatted
#' with the desired significant figures
#'
#' @param number the input number to be formatted
#' @param sigfig an integer with the number of desired significant figures
#'
#' @return a character value with the number formatted with the desired
#' significant figures
#'
#' @noRd
format_sigfig <- function(number, sigfig = 4L){
stopifnot(
is.numeric(number),
is.integer(sigfig)
)
sprintf("%.*f", signiftodigits(number, sigfig), number)
}
a <- data.frame(pippo = rnorm(20), ciccio = runif(20))
a
fct_entest_riprec(a, "pippo", 2, 1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?need
shiny::runApp()
